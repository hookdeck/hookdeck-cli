---
id: use-cases/test-debug-localhost/quickstart
description: "Step-by-step guide to test and debug webhooks on localhost using Hookdeck CLI"
title: "Quickstart: Test Webhooks on Localhost with Hookdeck CLI"
llms_description: How to configure Hookdeck CLI for local webhook testing and debugging
icon: quickstart-icon
link_title: Quickstart
---

In this quickstart, you'll learn how to test and debug webhook integrations on your localhost using the Hookdeck CLI. You'll set up a local development environment that receives real webhooks from third-party providers, inspect requests in real-time, and debug your webhook handlers without deploying code.

<!-- ![Local webhook testing infrastructure](@/content/docs/images/localhost-webhooks-infrastructure.png) -->

{% linkCard slug="use-cases/test-debug-localhost" title="Learn the key concepts" subtitle="Read the overview to understand how local webhook testing fits in your development workflow." /%}

You will walk through these steps:

1. Install and authenticate the Hookdeck CLI
2. Understand Hookdeck's core components
3. Start your local development server
4. Create a connection (Source, Destination, and routing in one command)
5. Connect the CLI to forward webhooks to localhost
6. Send a test webhook and see it arrive locally
7. Inspect and debug webhooks
8. Retry webhook events
9. Test with a real third-party provider

## 1. Before you begin

{% actionPrompt %}
Install the [Hookdeck CLI](/docs/cli).

{% CLIInstall /%}
{% /actionPrompt %}

{% actionPrompt %}
Run `hookdeck login` in your terminal to authenticate. If you don't already have a Hookdeck account, follow the instructions to create one.
{% /actionPrompt %}

```bash
hookdeck login
```

The CLI will open your browser for authentication. Once complete, you'll see a confirmation in your terminal.

## 2. Understand Hookdeck's core components

Before setting up your local environment, let's understand the three building blocks Hookdeck uses:

**{% ref entity="Source" /%}** - Represents the webhook sender (Stripe, Shopify, GitHub, or any webhook provider)
- Each Source gets a unique webhook URL
- Configure this URL in your provider's webhook settings
- Can specify a provider type for automatic verification and payload parsing

**{% ref entity="Destination" /%}** - Defines where webhooks are delivered
- **CLI**: Routes to your local development machine (what we'll use in this guide)
- **HTTP**: Routes to a deployed endpoint URL (for staging/production)
- **Mock**: Test endpoint that accepts but doesn't process webhooks

**{% ref entity="Connection" /%}** - Links a Source to a Destination
- Defines the routing rules between them
- Can include transformations, filters, and retry logic

In step 4, you'll create all three components with a single command.

## 3. Start your local development server

Set up a simple webhook handler on your local machine:

{% partial file="../_partials/_local-server.mdoc" /%}

## 4. Create your connection

Now create a complete webhook pipeline—Source, Destination, and Connection—with a single command:

{% actionPrompt %}
Run the following command to set up your webhook infrastructure:
{% /actionPrompt %}

```bash
hookdeck connection create \
  --name "test-webhooks-to-local" \
  --source-type WEBHOOK \
  --source-name "test-webhooks" \
  --source-description "Local testing source" \
  --destination-type CLI \
  --destination-name "local-dev"
```

**What this creates:**

1. **Source** named `test-webhooks` with a unique webhook URL
2. **Destination** named `local-dev` that routes to your local machine
3. **Connection** named `test-webhooks-to-local` that links them together

You'll see output like:

```bash
✔ Connection created successfully

Connection:  test-webhooks-to-local
Source:      test-webhooks (src_123abc)
Source URL:  https://hkdk.events/src_123abc
Source Type: WEBHOOK
Destination: local-dev (dst_456def)
```

{% actionPrompt %}
Save the Source URL—you'll use this to send test webhooks.
{% /actionPrompt %}

{% callout %}
Hookdeck can also perform webhook signature verification to confirm the source of an incoming webhook, but we're skipping that here for simplicity. See the [Source authentication docs](/docs/sources#add-source-authentication) for more information.
{% /callout %}

## 5. Connect the CLI to your local server

With your connection created and local server running, start the Hookdeck CLI to forward webhooks:

{% actionPrompt %}
In a **new terminal window**, run:
{% /actionPrompt %}

```bash
hookdeck listen 3030 test-webhooks --path /webhook
```

The CLI will use your existing `test-webhooks` Source and automatically set up forwarding.

You'll see output like:

```bash
●── HOOKDECK CLI ──●

Listening on 1 source • 1 connection • [i] Collapse

test-webhooks Source
│  Requests to → https://hkdk.events/src_{source_id}
└─ Forwards to → http://localhost:3030/webhook

💡 View dashboard to inspect, retry & bookmark events: https://dashboard.hookdeck.com/events/cli?team_id=...

Events • [↑↓] Navigate ──────────────────────────────────────────────────────────

> Waiting for events | [i] Expand connection info • [q] Quit
```

**What's happening:**
- The CLI connects to your `test-webhooks` Source
- It forwards incoming webhooks to your local server at `http://localhost:3030/webhook`
- The Connection routes events from the Source through the CLI Destination to your machine

{% actionPrompt %}
Keep this terminal window open. The CLI needs to stay running to forward webhooks.
{% /actionPrompt %}

## 6. Send a test webhook

Now that everything is connected, send a test webhook to see it arrive on your local server:

{% actionPrompt %}
In a **third terminal window**, send a test webhook to your Source URL:
{% /actionPrompt %}

{% partial file="../_partials/_local-curl-ecommerce.mdoc" /%}

Replace `{YOUR_SOURCE_URL}` with the Source URL from step 4.

### What happens:

1. **Hookdeck receives** the webhook at your Source URL
2. **CLI forwards** the request to your local server at `http://localhost:3030/webhook`
3. **Your server processes** the webhook and returns a response
4. **CLI logs** the delivery in your terminal

You should see output in three places:

**In your cURL terminal:**
```json
{
  "status": "SUCCESS",
  "message": "Request successfully handled",
  "request_id": "req_xyz789"
}
```

**In your CLI terminal:**
```bash
●── HOOKDECK CLI ──●

Listening on 1 source • 1 connection • [i] Expand

Events • [↑↓] Navigate ─────────────────────────────────────────────────

> 2025-10-27 16:51:39 [200] POST http://localhost:3000/webhook (11ms) → https://dashboard.hookdeck.com/events/evt_{id}  
```

**In your local server terminal:**

{% partial file="../_partials/_local-server-logs-ecommerce.mdoc" /%}

## 7. Inspect and debug webhooks

The CLI provides powerful debugging tools right in your terminal:

{% actionPrompt %}
Use the interactive CLI controls to inspect webhooks:
{% /actionPrompt %}

- **Press `d`** to view full request/response details for the selected event
- **Press `↑`/`↓`** to navigate between webhook events
- **Press `o`** to open an event in the dashboard for deeper inspection

For advanced debugging workflows, troubleshooting, and production best practices, see the [complete guide](/docs/use-cases/test-debug-localhost#debugging-webhooks-locally).

## 8. Retry webhook events

One of the most powerful features for local development is event retry. Once Hookdeck has captured a webhook, you can retry it to your local server instantly.

The CLI provides instant retry through keyboard shortcuts:

{% actionPrompt %}
In your running CLI session, use the interactive controls:
{% /actionPrompt %}

1. **Navigate events**: Press `↑` or `↓` (or `k`/`j`) to select the event you want to retry
2. **Retry**: Press `r` to instantly retry the selected event to your local server
3. **View details**: Press `d` to see full request/response data
4. **Open in dashboard**: Press `o` to view the event in the Hookdeck dashboard

The selected event is indicated by a `>` character. When you press `r`, the webhook is immediately retried to your local server, appearing in your CLI output and server logs.

You can also retry events from the [Hookdeck dashboard](https://dashboard.hookdeck.com/events) by clicking the **Retry** button on any event.

## 9. Test with a real provider

Now that you've tested with manual webhooks, connect a real third-party provider:

{% actionPrompt %}
Register your Source URL with your webhook provider (Stripe, Shopify, GitHub, etc.). The specific steps depend on the provider - check their documentation for "webhook configuration" or "webhook URL".
{% /actionPrompt %}

{% actionPrompt %}
Trigger an event in the provider's platform (create an order, push code, etc.).
{% /actionPrompt %}

{% actionPrompt %}
Watch as the real webhook flows through Hookdeck and arrives at your local development server.
{% /actionPrompt %}

## Next steps

Now that you're successfully testing webhooks locally, explore more advanced topics:

{% linkCard slug="use-cases/test-debug-localhost" title="Advanced CLI Usage & Troubleshooting" subtitle="Learn about testing failure scenarios, advanced CLI features, and common issues" /%}

{% linkCard slug="sources" anchor="add-source-authentication" title="Configure Source Authentication" subtitle="Learn how to set up authentication for your webhook sources" /%}

{% linkCard slug="retries" title="Configure Retry Behavior" subtitle="Learn how to set up automatic retries for failed webhooks" /%}

{% linkCard slug="filters" title="Filter Webhook Events" subtitle="Route only specific webhook events to your handlers" /%}